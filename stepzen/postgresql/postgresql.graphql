type Guide {
  created_at: DateTime
  email: String
  id: ID!
  location: String
  mobile: String
  name: String
  reviewList: [Review] @materializer(query: "getReviewUsingGuide_id")
}

type Hotel {
  address: String
  bedrooms: Int
  beds: Int
  created_at: DateTime
  description: String
  fee: Float
  guests: Int
  id: ID!
  latitude: Float
  longitude: Float
  name: String
  offer: Offer
    @materializer(
      query: "getOffer"
      arguments: [{ name: "id", field: "offer_id" }]
    )
  offerList: [Offer] @materializer(query: "getOfferUsingHotel_id")
  offer_id: ID
  photo: String
  points: Float
  reviewList: [Review] @materializer(query: "getReviewUsingHotel_id")
}

type Offer {
  created_at: DateTime
  hotel: Hotel
    @materializer(
      query: "getHotel"
      arguments: [{ name: "id", field: "hotel_id" }]
    )
  hotelList: [Hotel] @materializer(query: "getHotelUsingOffer_id")
  hotel_id: ID
  id: ID!
  name: String
}

type Photo {
  created_at: DateTime
  id: ID!
  photo: String
  place: Place
    @materializer(
      query: "getPlace"
      arguments: [{ name: "id", field: "place_id" }]
    )
  place_id: ID
}

type Place {
  created_at: DateTime
  description: String
  id: ID!
  location: String
  photo: String
  photoList: [Photo] @materializer(query: "getPhotoUsingPlace_id")
  points: Float
  reviewList: [Review] @materializer(query: "getReviewUsingPlace_id")
  title: String
}

type Review {
  created_at: DateTime
  guide: Guide
    @materializer(
      query: "getGuide"
      arguments: [{ name: "id", field: "guide_id" }]
    )
  guide_id: ID
  hotel: Hotel
    @materializer(
      query: "getHotel"
      arguments: [{ name: "id", field: "hotel_id" }]
    )
  hotel_id: ID
  id: ID!
  place: Place
    @materializer(
      query: "getPlace"
      arguments: [{ name: "id", field: "place_id" }]
    )
  place_id: ID
  review: String!
  user: User
    @materializer(
      query: "getUser"
      arguments: [{ name: "id", field: "user_id" }]
    )
  user_id: ID
}

type User {
  country: String
  created_at: DateTime
  email: String
  id: ID!
  image: String
  mobile: String
  name: String
  reviewList: [Review] @materializer(query: "getReviewUsingUser_id")
  role: String
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getGuideList: [Guide]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "guide"
      configuration: "postgresql_config"
    )
  getGuide(id: ID!): Guide
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "guide"
      configuration: "postgresql_config"
    )
  getReviewUsingGuide_id(id: ID!): [Review]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."guide_id", T."hotel_id", T."id", T."place_id", T."review", T."user_id"
        FROM "public"."review" T
        WHERE T."guide_id" = $1
      """
      configuration: "postgresql_config"
    )
  getHotelList: [Hotel]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "hotel"
      configuration: "postgresql_config"
    )
  getHotel(id: ID!): Hotel
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "hotel"
      configuration: "postgresql_config"
    )
  getOfferUsingHotel_id(id: ID!): [Offer]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."hotel_id", T."id", T."name"
        FROM "public"."offer" T
        WHERE T."hotel_id" = $1
      """
      configuration: "postgresql_config"
    )
  getReviewUsingHotel_id(id: ID!): [Review]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."guide_id", T."hotel_id", T."id", T."place_id", T."review", T."user_id"
        FROM "public"."review" T
        WHERE T."hotel_id" = $1
      """
      configuration: "postgresql_config"
    )
  getOfferList: [Offer]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "offer"
      configuration: "postgresql_config"
    )
  getOffer(id: ID!): Offer
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "offer"
      configuration: "postgresql_config"
    )
  getHotelUsingOffer_id(id: ID!): [Hotel]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."address", T."bedrooms", T."beds", T."created_at", T."description", T."fee", T."guests", T."id", T."latitude", T."longitude", T."name", T."offer_id", T."photo", T."points"
        FROM "public"."hotel" T
        WHERE T."offer_id" = $1
      """
      configuration: "postgresql_config"
    )
  getPhotoList: [Photo]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "photo"
      configuration: "postgresql_config"
    )
  getPhoto(id: ID!): Photo
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "photo"
      configuration: "postgresql_config"
    )
  getPlaceList: [Place]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "place"
      configuration: "postgresql_config"
    )
  getPlace(id: ID!): Place
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "place"
      configuration: "postgresql_config"
    )
  getPhotoUsingPlace_id(id: ID!): [Photo]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."id", T."photo", T."place_id"
        FROM "public"."photo" T
        WHERE T."place_id" = $1
      """
      configuration: "postgresql_config"
    )
  getReviewUsingPlace_id(id: ID!): [Review]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."guide_id", T."hotel_id", T."id", T."place_id", T."review", T."user_id"
        FROM "public"."review" T
        WHERE T."place_id" = $1
      """
      configuration: "postgresql_config"
    )
  getReviewList: [Review]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "review"
      configuration: "postgresql_config"
    )
  getReview(id: ID!): Review
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "review"
      configuration: "postgresql_config"
    )
  getUserList: [User]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      configuration: "postgresql_config"
    )
  getUser(id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      configuration: "postgresql_config"
    )
  getUserByEmail(email: String!): User
    @dbquery(
      type: "postgresql"
      query: """
      select * from "user" where "email" = $1
      """
      configuration: "postgresql_config"
    )
  getReviewUsingUser_id(id: ID!): [Review]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."guide_id", T."hotel_id", T."id", T."place_id", T."review", T."user_id"
        FROM "public"."review" T
        WHERE T."user_id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertGuide(
    created_at: DateTime!
    email: String!
    name: String!
    mobile: String!
    location: String!
  ): Guide
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "guide"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteGuide(id: ID!): Guide
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "guide"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertHotel(
    bedrooms: Int!
    created_at: DateTime!
    guests: Int!
    description: String!
    name: String!
    points: Float!
    address: String!
    beds: Int!
    latitude: Float!
    longitude: Float!
    photo: String!
    offer_id: ID!
    fee: Float!
  ): Hotel
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "hotel"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteHotel(id: ID!): Hotel
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "hotel"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertOffer(created_at: DateTime!, name: String!, hotel_id: ID!): Offer
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "offer"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteOffer(id: ID!): Offer
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "offer"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPhoto(created_at: DateTime!, photo: String!, place_id: ID!): Photo
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "photo"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePhoto(id: ID!): Photo
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "photo"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPlace(
    created_at: DateTime!
    description: String!
    photo: String!
    points: Float!
    location: String!
    title: String!
  ): Place
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "place"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePlace(id: ID!): Place
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "place"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertReview(
    place_id: ID!
    review: String!
    created_at: DateTime!
    hotel_id: ID!
    guide_id: ID!
    user_id: ID!
  ): Review
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "review"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteReview(id: ID!): Review
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "review"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertUser(
    email: String!
    role: String!
  ): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateUser(
    id: ID!,
    name: String
    image: String
    mobile: String
    country: String
  ): User
    @dbquery(
      type: "postgresql"
      query: """
      update "user" SET "name" = $2, "image" = $3, "mobile" = $4, "country" = $5 WHERE "id" = $1 RETURNING *
      """
      configuration: "postgresql_config"
    )
  deleteUser(id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
